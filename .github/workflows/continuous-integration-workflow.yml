name: build

on:  # cf. https://github.community/t/how-to-trigger-an-action-on-push-or-pull-request-but-not-both/16662
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }} üîß
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies ‚öôÔ∏è
        run: |
          sudo apt-get install qpdf
          python -m pip install --upgrade pip
          pip install . -r test/requirements.txt -r docs/requirements.txt
      - name: Statically checking code üîé
        run: pylint fpdf
      - name: Ensure code has been autoformatted with black üñåÔ∏è
        run: black --check .
      - name: Checking all PDF samples ‚òë
        if: matrix.python-version == '3.9'
        run: |
          # Using qpdf
          find . -name '*.pdf' | xargs -n 1 qpdf --check
          # Using Datalogics PDF Checker:
          scripts/install-pdfchecker.sh
          find . -name '*.pdf' | xargs -n 1 PDF_Checker/pdfchecker --profile PDF_Checker/CheckerProfiles/everything.json --input
          # Using VeraPDF:
          scripts/install-verapdf.sh
          find . -name '*.pdf' | xargs -n 1 verapdf --format text -v
      - name: Running tests ‚òë
        run: |
          # Ensuring there is no `generate=True` left remaining in calls to assert_pdf_equal:
          grep -IRF generate=True test/ && exit 1
          # Executing all tests:
          pytest
          # Uploading coverage report to codecov.io
          bash <(curl -s https://codecov.io/bash)
      - name: Generating HTML documentation üèóÔ∏è
        run: |
          mkdir -p public/
          mkdocs build
          pdoc --html -o public/ fpdf
      - name: Deploy documentation üöÄ
        # GitHub Pages deployment should not be done for all Python versions,
        # otherwise commits will conflict on the gh-pages branch:
        if: github.ref == 'refs/heads/master' && matrix.python-version == '3.9'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: public/
      - name: Publish on Pypi üöÄ
        # Similarly, we only publish a new version on Pypi once per pipeline running on master:
        if: github.ref == 'refs/heads/master' && matrix.python-version == '3.9'
        run: |
          sudo apt update && sudo apt install -y curl jq
          echo Versions already released on Pypi: $(curl -Ls 'https://pypi.org/pypi/fpdf2/json' | jq -r '.releases|keys[]')
          echo Current code version: $(python setup.py -V)
          # Checking if current code version has already been released:
          curl -Ls 'https://pypi.org/pypi/fpdf2/json' | jq -r '.releases|keys[]' | grep "^$(python setup.py -V)\$" && exit 0
          # No? Then performing a release on Pypi now:
          pip install --upgrade twine wheel
          python setup.py sdist bdist_wheel
          twine check dist/*
          twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.FPDF2_GITHUB_ACTION_PUBLISH }}
